#element {
	.link(
		@color: @link-primary;
		@color-hover: inherit;
		@border-opacity: {
			initial: 30%;
			hover: 30%;
		}
	) when not (@color = inherit) {
		color: @color;
		cursor: pointer;
		text-decoration: none;
		border-bottom: 1px solid fade(@color, @border-opacity[initial]);
		transition: @duration @timing-function;
		transition-property+: color, fill, border-bottom-color;

		&:hover {
			@color-hover2: if(lightness(@color) < 20%, lighten(@color, 30%), darken(@color, 30%));
			@color-hover3: if(@color-hover = inherit, @color-hover2, @color-hover);

			color: @color-hover3;
			border-bottom-color: fade(@color-hover3, @border-opacity[hover]);
		}

		&:not([href]),
		&[href^="tel"] {
			color: inherit !important;
			border-bottom-color: transparent !important;
			cursor: inherit;
		}

		&[href^="tel"] {
			white-space: nowrap;
		}

		&[aria-label] {
			border-bottom-color: transparent !important;
		}
	}

	.button(
		@tone: @button-primary;
		@radius: @radius
	) {
		@color: contrast(@tone, @dark-primary, @light-primary);

		position: relative;
		display: inline-flex;
		align-items: center;
		padding: (@indent / 2 - 1px) (@indent - 1px);
		line-height: @line-height;
		min-height: (@line-height + @indent);
		vertical-align: middle;
		justify-content: center;
		color: @color !important;
		white-space: nowrap;
		background-color: @tone;
		border: 1px solid fade(@tone, 0) !important;
		border-radius: @radius;
		cursor: pointer;
		transition: @duration @timing-function;
		transition-property+: box-shadow, border-color, background-color;

		&:focus {
			#state.focus(fade(@tone, 50%));
		}

		body:not(.mobile) &:not([disabled]):hover {
			@tone-hover: if(lightness(@tone) < 20%, lighten(@tone, 10%), darken(@tone, 10%));

			background-color: @tone-hover;
		}

		&:active {
			top: 1px;
		}
	}
}

#state {
	.focus(@color: currentColor; @width: 2px) {
		outline: none;
		box-shadow: 0px 0px 0px @width @color;

		.no-focus & {
			box-shadow: none;
		}
	}

	.disabled(@opacity: 0.5) {
		cursor: not-allowed;
		opacity: @opacity;
	}
}

#text-sizes {
	.base() {
		font-size: @font-size;
		line-height: @line-height;
	}

	.small() {
		font-size: @font-size-small;
		line-height: @line-height-small;
	}

	.big() {
		font-size: @font-size-big;
		line-height: @line-height-big;
	}

	.h1() {
		font-size: @font-size-h1;
		line-height: @line-height-h1;

		@media (min-width: @breakpoints-md) {
			font-size: @font-size-h1-larger;
			line-height: @line-height-h1-larger;
		}
	}

	.h2() {
		font-size: @font-size-h2;
		line-height: @line-height-h2;

		@media (min-width: @breakpoints-md) {
			font-size: @font-size-h2-larger;
			line-height: @line-height-h2-larger;
		}
	}

	.h3() {
		font-size: @font-size-h3;
		line-height: @line-height-h3;

		@media (min-width: @breakpoints-md) {
			font-size: @font-size-h3-larger;
			line-height: @line-height-h3-larger;
		}
	}
}

#grid {
	.gap(@type; @property; @negative: false; @half: false) {
		@value: if(@type = block, @gap * 1.5, @gap);
		@value2: if(@half = true, @value / 2, @value);
		@minus: if(@negative = true, '-', '');

		@{property}: ~"@{minus}@{value2}";

		@media (min-width: @breakpoints-md) {
			@value: if(@type = block, @gap-larger * 2, @gap-larger);
			@value2: if(@half = true, @value / 2, @value);

			@{property}: ~"@{minus}@{value2}";
		}
	}
}
